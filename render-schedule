#!/usr/bin/env python3.14



import json 
import argparse

from colorama import Fore, Style, init
from datetime import datetime, timedelta



with open('schedule.json', 'r') as f:
    schedule = json.load(f)
with open('overrides.json', 'r') as f:
    overrides = json.load(f)


class ScheduleEntry:
    def __init__(self, user, start_at, end_at):
        self.user = user
        self.start_at = start_at
        self.end_at = end_at

    def __str__(self):
        return f"{self.user}, Start: {self.start_at.strftime('%b %d %H:%M')}, End: {self.end_at.strftime('%b %d %H:%M')}"
    
    def set_start(self, start_at):
        self.start_at = start_at

    def set_end(self, end_at):
        self.end_at = end_at
   
    def setEntry(self, user, start_at, end_at):
        self.user = user
        self.start_at = start_at
        self.end_at = end_at

    def dict(self):
        return {
            'user': self.user,
            'start_at': self.start_at.strftime('%d %B %H:%M'),
            'end_at': self.end_at.strftime('%d %B %H:%M')
        }


def general_schedule():

    users = schedule['users']
    handover_start_at = datetime.fromisoformat(schedule['handover_start_at'].replace('Z', '+00:00'))
    handover_interval_days = schedule['handover_interval_days']
    base_schedule = []

    for i in range(len(users)): 
        user = users[i % len(users)]
        start_at = handover_start_at + timedelta(days=i * handover_interval_days)
        end_at = start_at + timedelta(days=handover_interval_days)
        entry = ScheduleEntry(user, start_at, end_at)
        base_schedule.append(entry)

    return base_schedule
    


def override_schedule(base_schedule):
    
    override_user = overrides['user']
    override_start_at = datetime.fromisoformat(overrides['start_at'].replace('Z', '+00:00'))
    override_end_at = datetime.fromisoformat(overrides['end_at'].replace('Z', '+00:00'))
    

    init()

    final_schedule = []
    override_added = False
    
    for entry in base_schedule:
        if entry.start_at< override_end_at and entry.end_at > override_start_at:

            if entry.start_at < override_start_at:
                truncated_entry = ScheduleEntry(entry.user, entry.start_at, override_start_at)
                final_schedule.append(truncated_entry)
            
            if not override_added:
                override_entry = ScheduleEntry(override_user, override_start_at, override_end_at)
                final_schedule.append(override_entry)
                override_added = True

            if entry.end_at > override_end_at:
                truncated_entry = ScheduleEntry(entry.user, override_end_at, entry.end_at)
                final_schedule.append(truncated_entry)
        else:
            final_schedule.append(entry)

    
    for entry in final_schedule:
        if entry is override_entry:
            print(Fore.BLUE+ str(entry) + Style.RESET_ALL)
        else:
            print(str(entry))

def trucate_schedule():
    print()

base_schedule =[]
base_schedule = general_schedule()
override_schedule(base_schedule)

